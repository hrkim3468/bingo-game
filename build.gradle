/*
bingo-game 프로젝트 구성

(1) bingo-lib-code 프로젝트
- 서버간에 공통으로 사용하는 Java Package를 별도의 jar 형태로 분리해서 제공하는 프로젝트
- bingo-gateway, bingo-apiserver, bingo-apiclient에서 공통으로 사용
- 프로젝트 내부의 pom.xml 파일을 이용하여 독립적으로 maven 빌드된다.

(2) bingo-gateway 프로젝트
- SpringBoot로 구성된 자바 프로젝트
- 프로젝트 내부의 pom.xml 파일을 이용하여 독립적으로 maven 빌드된다.

(3) bingo-apiserver 프로젝트
- SpringBoot로 구성된 자바 프로젝트
- 프로젝트 내부의 pom.xml 파일을 이용하여 독립적으로 maven 빌드된다.

(4) bingo-frontend 프로젝트
- html, css, js 만으로 구성된 UI 프로젝트
- 개발시에만 프로젝트 내부의 Grunt로 테스트

(5) bingo-apiclient 프로젝트
- SpringBoot로 구성된 자바 프로젝트
- bingo-frontend 프로젝트의 결과물을 jar 형태로 묶어서 가지고 동작한다.
- ROOT 프로젝트에 존재하는 Gradle 파일을 이용하여 bingo-frontend JAR 생성 및 bingo-apiclient 빌드가 이루어진다.
*/
def vJavaLang = '1.8'
def gradleDir = "${rootProject.rootDir}/gradle"

wrapper.gradleVersion = '2.7'

buildscript {
    ext {
        springBootVersion = '1.1.12.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
    }
}


/*
========================================================================
Sub Proejct 공통으로 적용되는 설정
========================================================================
*/
configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'java'    

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang
    
    compileJava.options.encoding = 'UTF-8'
    
    repositories {
        maven { url "https://oss.sonatype.org/content/groups/public" }
        maven { url "http://repo.springsource.org/libs-release" }
        maven { url "http://repo.springsource.org/libs-milestone" }
        maven { url "http://repo.springsource.org/plugins-release" }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        //compile 'org.projectlombok:lombok'
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
        testCompile 'org.objenesis:objenesis'
    }
    
    configurations {
        all*.exclude module: 'commons-logging'
    } 
}


/*
========================================================================
빌드 Task 테스트
========================================================================

사용법)
gradle -q hello
gradle -q bingo-frontend:hello
*/
allprojects {
	task hello << {
		task -> println "I'm $task.project.name"
	}
}


subprojects {

}



/*
========================================================================
FrontEnd 빌드 Task 정의
========================================================================

사용법)
gradle bingo-frontend:build
gradle bingo-apiclient:build
*/
project(':bingo-frontend') {

	task gruntInstall(type:Exec) {
        logging.captureStandardOutput LogLevel.INFO
        logging.captureStandardError LogLevel.LIFECYCLE
        
        inputs.files "package.json"
        outputs.files "node_modules"

        commandLine "C:\\Program Files\\nodejs\\npm.cmd", "install"       		
	}
	
	task bowerInstall(type:Exec, dependsOn: [gruntInstall]) {
        logging.captureStandardOutput LogLevel.INFO
        logging.captureStandardError LogLevel.LIFECYCLE
        
        inputs.files "bower.json"
        outputs.files "src/libs"

        commandLine "C:\\Program Files\\nodejs\\npm.cmd", "install"       		
	}
	
	task gruntBuild(type:Exec, dependsOn: [bowerInstall]) {
    	logging.captureStandardOutput LogLevel.INFO
    	logging.captureStandardError LogLevel.LIFECYCLE
 		
 		inputs.dir "src"
 		outputs.dir "dist"
 		
 		commandLine "C:\\Users\\NAVER.AL010\\AppData\\Roaming\\npm\\grunt.cmd", "real"
	}
	sourceSets.main.resources { 
		srcDirs "dist" 
	}
	jar {
		from "dist"
		includeEmptyDirs = false
	}
	jar.dependsOn gruntBuild
	
	clean {
		delete ".tmp"
		delete "dist"
	}
}



project(':bingo-apiclient') {
	apply plugin: 'spring-boot'
	apply plugin: 'io.spring.dependency-management' 
	apply plugin: 'war'

	war {
	    baseName = 'bingo-apiclient'
	    version = '0.0.1-SNAPSHOT'
	}
	
    dependencies {
	    compile('org.springframework.boot:spring-boot-starter-web')
	    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	    testCompile('org.springframework.boot:spring-boot-starter-test') 

        runtime project(':bingo-frontend')
    }

    springBoot {
        mainClass = 'com.example.SprngBootWebDemoApplication'
    }   	
}



















