def vJavaLang = '1.8'
//def javaProjects = [ project(':bingo-server'), project(':bingo-common') ]
//def bootProjects = javaProjects - project(':bingo-common')
def gradleDir = "${rootProject.rootDir}/gradle"

wrapper.gradleVersion = '2.7'

buildscript {
    ext {
        springBootVersion = '1.1.12.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
    }
}


configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'java'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang
    
    compileJava.options.encoding = 'UTF-8'
    
    repositories {
        maven { url "https://oss.sonatype.org/content/groups/public" }
        maven { url "http://repo.springsource.org/libs-release" }
        maven { url "http://repo.springsource.org/libs-milestone" }
        maven { url "http://repo.springsource.org/plugins-release" }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        compile 'org.projectlombok:lombok'
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
        testCompile 'org.objenesis:objenesis'
    }
    
    configurations {
        all*.exclude module: 'commons-logging'
    } 
}


/*
	========================================================================
	빌드 Task 테스트
	========================================================================
	
	사용법)
	gradle -q hello
	gradle -q bingo-frontend:hello
*/
allprojects {
	task hello << {
		task -> println "I'm $task.project.name"
	}
}


subprojects {

}



/*
	========================================================================
	FrontEnd 빌드 Task 정의
	========================================================================
	
	사용법)
	gradle bingo-frontend:build
*/
project(':bingo-frontend') {

	task gruntInstall(type:Exec) {
        logging.captureStandardOutput LogLevel.INFO
        logging.captureStandardError LogLevel.LIFECYCLE
        
        inputs.files "package.json"
        outputs.files "node_modules"

        commandLine "C:\\Program Files\\nodejs\\npm.cmd", "install"       		
	}
	
	task bowerInstall(type:Exec, dependsOn: [gruntInstall]) {
        logging.captureStandardOutput LogLevel.INFO
        logging.captureStandardError LogLevel.LIFECYCLE
        
        inputs.files "bower.json"
        outputs.files "src/libs"

        commandLine "C:\\Program Files\\nodejs\\npm.cmd", "install"       		
	}
	
	task gruntBuild(type:Exec, dependsOn: [bowerInstall]) {
    	logging.captureStandardOutput LogLevel.INFO
    	logging.captureStandardError LogLevel.LIFECYCLE
 		
 		inputs.dir "src"
 		outputs.dir "dist"
 		
 		commandLine "C:\\Users\\NAVER.AL010\\AppData\\Roaming\\npm\\grunt.cmd", "real"
	}
	sourceSets.main.resources { 
		srcDirs "dist" 
	}
	jar {
		from "dist"
		includeEmptyDirs = false
	}
	jar.dependsOn gruntBuild
	
	clean {
		delete ".tmp"
		delete "dist"
	}
}




















